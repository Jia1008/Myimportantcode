1：io流解决乱码问题

2：抽象类和接口的不同之处
	1、抽象类和接口都不能直接实例化，如果要实例化，抽象类变量必须指向实现
所有抽象方法的子类对象，接口变量必须指向实现所有接口方法的类对象。
	2、抽象类要被子类继承，接口要被类实现。
	3、接口只能做方法申明，抽象类中可以做方法申明，也可以做方法实现
	4、接口里定义的变量只能是公共的静态的常量，抽象类中的变量是普通变量。
	5、抽象类里的抽象方法必须全部被子类所实现，如果子类不能全部实现父类抽象方法，
那么该子类只能是抽象类。同样，一个实现接口的时候，如不能全部实现接口方法，那么该类也只能为抽象类。
	6、抽象方法只能申明，不能实现。abstract void abc();不能写成abstract void abc(){}。
	7、抽象类里可以没有抽象方法
	8、如果一个类里有抽象方法，那么这个类只能是抽象类
	9、抽象方法要被实现，所以不能是静态的，也不能是私有的。
	10、接口可继承接口，并可多继承接口，但类只能单根继承。

　　特别是对于公用的实现代码，抽象类有它的优点。抽象类能够保证实现的层次关系，
避免代码重复。然而，即使在使用抽 象类的场合，也不要忽视通过接口定义行为模型的原则。
从实践的角度来看，如果依赖于抽象类来定义行为，往往导致过于复杂的继承关系，
而通过接口定义行为能 够更有效地分离行为与实现，为代码的维护和修改带来方便。

     简单来说，
	接口是公开的，里面不能有私有的方法或变量，是用于让别人使用的，
而抽象类是可以有私有方法或私有变量的，
	另外，实现接口的一定要实现接口里定义的所有方法，而实现抽象类可以有选择地重写需要用到的方法，
一般的应用里，最顶级的是接口，然后是抽象类实现接口，最后才到具体类实现。
	还有，接口可以实现多重继承，而一个类只能继承一个超类，但可以通过继承多个接口实现多重继承，
接口还有标识（里面没有任何方法，如Remote接口）和数据共享（里面的变量全是常量）的作用.

3：继承和多态的意义

4：int[] x={1,2,3} 和 int x[]=new int[]{1,2,3}有什么不同
	int ia[]={1,2,3,4};  直接初始化的话 。
	int ia[]=new int[]{1,2,3,4} 先通过new 申请一块内存，然后再进行初始化。

5：接口允许多继承

6：静态方法不允许调用非静态方法

7：String StringBuilder和StringBuffer的区别
	1:三者在执行速度方面的比较：StringBuilder>StringBuffer>String
	2:String:字符串常量   StringBuffer:字符串变量  StringBuilder:字符串变量
	当我们看到  String s="abcd" s=s+1时，不要被欺骗了，String是常量，不能改变其值，
我们之前对象s并没有变化，所以我们说String类型是不可改变的对象了，由于这种机制，
每当用String操作字符串时，实际上是在不断的创建新的对象，而原来的对象就会变为垃圾被ＧＣ
回收掉，可想而知这样执行效率会有多底。

	StringBuilder：线程非安全的
　　　　StringBuffer：线程安全的

　　　　当我们在字符串缓冲去被多个线程使用是，JVM不能保证StringBuilder的操作是安全的，
	虽然他的速度最快，但是可以保证StringBuffer是可以正确操作的。当然大多数情况下就
	是我们是在单线程下进行的操作，所以大多数情况下是建议用StringBuilder而不用StringBuffer的，就是速度的原因。

 

           对于三者使用的总结： 1.如果要操作少量的数据用 = String

　　　　　　　　　　              2.单线程操作字符串缓冲区 下操作大量数据 = StringBuilder

　　　　　　　　　　              3.多线程操作字符串缓冲区 下操作大量数据 = StringBuffer

8：集合和数组的区别有哪些？
	(1)数组是大小固定的，并且同一个数组只能存放类型一样的数据（基本类型/引用类型）
	(2)JAVA集合可以存储和操作数目不固定的一组数据。 
	(3)若程序时不知道究竟需要多少对象，需要在空间不足时自动扩增容量，则需要使用容器类库，array不适用。
	
9：面向对象就是：把数据及对数据的操作方法放在一起，作为一个相互依存的整体--对象。对同类
对象抽象出其共性，形成类。类中的大多数数据，只能用本类的方法进行处理。类通过一个简单的外
部接口与外界发生关系，对象与对象之间通过消息进行通信。

10：分析各个集合的相同点和不同点。(是否能重复，能有空值，性能，线程安全)


11：搞会枚举用法

12：一段程序遇到return语句一定会终止吗？
	不会

13：线程和进程的区别？
	进程和线程的主要差别在于它们是不同的操作系统资源管理方式。
进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，
而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址
空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换
时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只
能用线程，不能用进程。


线程和进程在使用上各有优缺点：线程执行开销小，但不利于资源的管理和保护；而进程正相反。
同时，线程适合于在SMP机器上运行，而进程则可以跨机器迁移。





